name: "PlantUML"
description: "Generate PlantUML diagrams as SVGs"
inputs:
  github-token:
    description: "A GitHub PAT used to commit and push generated SVGs back into the repository."
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PUML_PUSH_TOKEN }}
        fetch-depth: 0

    - name: Get changed PUML files
      id: changed-plantuml-files
      shell: bash
      run: |
        set -o pipefail
        echo Searching branch for new PUML files ...
        if [[ "${{ github.event.before }}" == "" || "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
          echo Workflow was triggered from a non-push event.
          echo Detected PUML files will contain all PUML files in the branch that differ from the parent branch.

          # If the exit code of the pipeline is 141, that means awk exited
          # before git did. This is expected, as awk explicitly exits on the
          # first match we want to print. The last part of this command traps
          # that exit code and ignores it, while letting other exit codes
          # fail the shell command.
          PARENT_BRANCH_SHA=`git --no-pager log --decorate | awk '$1 ~ /^commit/ && $2 ~ /[a-z0-9]+/ && $3 ~ /\(origin/{printf $2;exit}' || (exit_code=$?; [ $exit_code -eq 141 ] && : || exit $exit_code)`
          COMMITISH="$PARENT_BRANCH_SHA..HEAD"
        else
          echo Workflow was triggered by a push event.
          echo Detected PUML files will contain only PUML files committed since the previous push.
          COMMITISH="${{ github.event.before }}..${{ github.sha }}"
        fi

        echo Detected range of relevant commits are $COMMITISH

        changed_files=$(git diff-tree -z -r --no-commit-id --name-status $COMMITISH \*.puml `# get all changed PUML files and output w/ binary separators` \
        | sed -z 's/\n/\\n/g;s/ /\\ /g;s/\.puml$/.puml\n/' `# replace all newlines in filenames with literals; replace all spaces in filenames with literals; replace the end of each changed file with a newline` \
        | sed 's/^\x0//g' `# remove all null characters at the start of each filename` \
        | awk -F'\0' ' # use null characters between modification type and filenames as the field separator
          function join(arr) {
            header = header_sep = ""
            next_str_start = 0
            joined = ""
            for ( i=0; i in arr; i++ )
            {
              header = header header_sep next_str_start ":" length(arr[i])
              next_str_start = next_str_start + length(arr[i])
              joined = joined arr[i]
              header_sep = ">"
            }
            return length(header) ">" header joined
          }
          BEGIN {
            # a technique to create a new array in awk
            delete orphaned_files[0]
            delete modified_files[0]
          }
          {
            change_type = $1 # Git change type - A, D, M, etc.
            $1 = "" # remove the change type from the line because all subsequent operations only need the filename
            sub(/^[ ]/, "", $0) # remove extra space Git adds to filenames from diff-tree
            gsub(/[ ]/, "\\\\ ", $0) # replace all spaces in filenames w/ literal escape sequences. the final string is "\\ "
            # Remove SVG files associated with removed PUML files
            if ( change_type ~ /^D$/ && $0 ~ /\.puml$/ )
            {
              sub(/\.puml/, ".svg", $0)
              orphaned_files[length(orphaned_files)] = $0
            }
            # Process new SVGs for added/modified PUML files
            else if ( change_type !~ /^D$/ && $0 ~ /\.puml"?$/ ) # filenames may end with a " if diff-tree quoted them
            {
              modified_files[length(modified_files)] = $0
            }
          }
          END {
            if ( length(orphaned_files) > 0 )
              orphaned_files_string=join(orphaned_files)

            if ( length(modified_files) > 0 )
              modified_files_string=join(modified_files)

            # output filenames and length of each string for future parsing.
            # looks like:
            # 12:25>3>0:7foo.svg7>0:8>8:8bar.pumlbaz.puml
            printf "%d:%d>%s%s", length(orphaned_files_string), length(modified_files_string), orphaned_files_string, modified_files_string
          }')

          get_filenames()
          {
            # The first argument is a format containing:
            #    the length of a header
            #    a header containing the positions and lengths of each filename
            #    the filenames
            # Looks like:
            # 16>0:44>44:52>96:54docs/models/technician_domain/code/assay.svgdocs/models/technician_domain/code/control_plate.svgdocs/models/technician_domain/code/treatment_plate.svg
            local shell_unsafe_filenames=$1

            # The name of the envvar to set, e.g., "modified_files"
            local github_envvar_name=$2

            # The length of the header precedes the header length demarcation
            # Following the example above, this is "16"
            local header_length=${shell_unsafe_filenames%%">"*}

            # This is the number (and a colon) that specifies the
            # length of the header minus this demarcation (the number and a colon).
            # +1 at the end to account for the colon after the number.
            # Example: this is "3" - the length of "16>"
            local header_demarcation_length=$(( ${#header_length} + 1 ))

            # The rest of the header following the header length demarcation.
            # Example> 0:44>44:52>96:54
            local header=${shell_unsafe_filenames:$header_demarcation_length:$header_length}

            # Store each demarcated file position in an array, separated by a colon.
            # Example: Each of "0:44" "44:52" and "96:54" are array items (minus quotes)
            local filename_lengths=(${header//>/ })

            # The space-separated filenames that the envvar will be set to
            local filenames=""
            local sep=""

            # file_demarcation is set to the items in filename_lengths, e.g. "0:44"
            for file_demarcation in "${filename_lengths[@]}"; do
              # An array whose items are the numbers separated by ":"
              # Example: 0 and 44
              # The first number indicates the starting position in the string where the filename is.
              # The second number indicates the number of characters to read following the start position.
              local filename_locations=(${file_demarcation//:/ })
              local filename_start_pos=${filename_locations[0]}
              local filename_length=$(( ${filename_locations[1]} ))

              # printf %q will safely escape the filename string for outputting into $GITHUB_OUTPUT, which Actions sources later
              local shell_unsafe_filename=${shell_unsafe_filenames:$(( $header_length + $header_demarcation_length + $filename_start_pos )):$filename_length}
              local shell_safe_filename=`printf %q "$shell_unsafe_filename"`

              filenames="${filenames}${sep}${shell_safe_filename}"
              sep=" "
            done

            echo "$github_envvar_name=$filenames" >> $GITHUB_OUTPUT
          }

          # The output from awk contains a header denoting the positions of
          # where the orphaned and modified files are within the string.
          # This is the first numbers in the string, e.g., "169:538"
          part_lengths=${changed_files%%">"*}

          # Store the number in an array
          part_lengths=(${part_lengths//:/ })

          # This turns the string, e.g., `"169"` into the number `169`
          orphaned_files_length=$(( ${part_lengths[0]} )) # the first number, e.g., 169
          modified_files_length=$(( ${part_lengths[1]} )) # the second number, e.g., 538

          # $changed_files contains the output from awk following the length numbers,
          # e.g., 169:538>16>0:44>44:52>96:54docs/models/technician_domain/code/assay.svgdocs/models/technician_domain/code/control_plate.svgdocs/models/technician_domain/code/treatment_plate.svg
          # ${#orphaned_files_length} gives the length of the string value, e.g., "169" is "3".
          # Add 2 to account for the colon and newline.
          # This operation removes the "169:538>" portion from the output.
          changed_files=${changed_files:$(( ${#orphaned_files_length} + ${#modified_files_length} + 2 ))}

          if [ $orphaned_files_length -gt 0 ]; then
            shell_unsafe_orphaned_files="${changed_files:0:$orphaned_files_length}"
            get_filenames $shell_unsafe_orphaned_files "orphaned_files"
          fi

          if [ $modified_files_length -gt 0 ]; then
            shell_unsafe_modified_files="${changed_files:$orphaned_files_length:$modified_files_length}"
            get_filenames $shell_unsafe_modified_files "modified_files"
          fi

    - name: Removed PUML files detected
      id: detected-removed-files
      shell: bash
      if: success()
      run: |
        set -o pipefail
        orphaned_files='${{ steps.changed-plantuml-files.outputs.orphaned_files}}'
        if [[ $orphaned_files == "" ]]; then
          echo No removed PUML files detected.
        else
          echo $orphaned_files
        fi

    - name: Added or modifed PUML files detected
      id: detected-changed-files
      shell: bash
      if: success()
      run: |
        set -o pipefail
        modified_files='${{ steps.changed-plantuml-files.outputs.modified_files }}'
        if [[ $modified_files == "" ]]; then
          echo No PUML file changes detected.
        else
          echo $modified_files
        fi

    - name: Remove Orphaned SVG Diagrams
      id: remove-orphaned-files
      shell: bash
      if: success() && steps.changed-plantuml-files.outputs.orphaned_files != ''
      run: |
        set -o pipefail
        rm ${{ steps.changed-plantuml-files.outputs.orphaned_files }}

    - name: Generate SVG Diagrams
      id: generate-svg-diagrams
      if: success() && steps.changed-plantuml-files.outputs.modified_files != ''
      uses: sstopkin/plantuml-github-action@a7634b1e85077a83f1375808a2347b5e6b09d6a3
      with:
          args: -DPLANTUML_LIMIT_SIZE=8192 -v -tsvg ${{ steps.changed-plantuml-files.outputs.modified_files }}

    - name: Push Local Changes
      id: push-changes
      if: |
        success() && (
           steps.changed-plantuml-files.outputs.modified_files != ''
        || steps.changed-plantuml-files.outputs.orphaned_files != '')
      uses:  stefanzweifel/git-auto-commit-action@v4.15.3
      with:
        commit_message: "Update SVG images for PlantUML diagrams"
        branch: ${{ github.head_ref }}